void callback(const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr& msg)
{
  if(empieza==true){
    cout << "Entro por el if" << endl;
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZRGB>(*msg));
    // Copia la primera nube de puntos en la segunda
    copyPointCloud(*cloud, *cloud_ant);
    copyPointCloud(*cloud, *mapa);
    cout << "Puntos capturados_1: " << cloud->size() << endl;
    empieza = false;
  }
  else{
    cout << "Entro por el else" << endl;

    copyPointCloud(*msg, *cloud_actual);
    cout << "Puntos capturados_2: " << cloud_actual->size() << endl;

    // Declaraciones
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_filtered_ant (new pcl::PointCloud<pcl::PointXYZRGB>);
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_filtered_actual (new pcl::PointCloud<pcl::PointXYZRGB>);

    PointCloud<pcl::PointXYZRGB>::Ptr pcKeyPoints_antXYZ (new pcl::PointCloud<pcl::PointXYZRGB>);
    PointCloud<pcl::PointXYZRGB>::Ptr pcKeyPoints_actualXYZ (new pcl::PointCloud<pcl::PointXYZRGB>);

    PointCloud<pcl::PointWithScale>::Ptr pcKeyPoints_ant (new pcl::PointCloud<pcl::PointWithScale>);
    PointCloud<pcl::PointWithScale>::Ptr pcKeyPoints_actual (new pcl::PointCloud<pcl::PointWithScale>);

    PointCloud<PFHSignature125>::Ptr cloudDescriptors_ant (new pcl::PointCloud<PFHSignature125>);
    PointCloud<PFHSignature125>::Ptr cloudDescriptors_actual (new pcl::PointCloud<PFHSignature125>);

    // Filtrado de la nube y quitamos los NaN
      /*
      pcl::VoxelGrid<pcl::PointXYZRGB > vGrid;
      vGrid.setInputCloud (cloud_1);
      vGrid.setLeafSize (0.05f, 0.05f, 0.05f);
      vGrid.filter (*cloud_filtered_1);
      cout << "Puntos tras VG_1: " << cloud_filtered_1->size() << endl;

      std::vector<int> indices;
      cloud_filtered_1->is_dense = false;
      removeNaNFromPointCloud<PointXYZRGB>(*cloud_filtered_1, *cloud_filtered_1, indices);
      cout << "Quitamos los NAN y quedan: " << cloud_filtered_1->size() << endl;
      copyPointCloud(*cloud_filtered_1, *cloud_1);
      cout << "Comprobacion del copy(tiene que dar los mismos puntos que en la linea anterior): " << cloud_1->size() << endl;
      */
    pcl::VoxelGrid<pcl::PointXYZRGB > vGrid;
    vGrid.setInputCloud (cloud_ant);
    vGrid.setLeafSize (0.05f, 0.05f, 0.05f);
    vGrid.filter (*cloud_filtered_ant);
    cout << "Puntos tras VG_ant: " << cloud_filtered_ant->size() << endl;

    std::vector<int> indices;
    cloud_filtered_ant->is_dense = false;
    removeNaNFromPointCloud<PointXYZRGB>(*cloud_filtered_ant, *cloud_filtered_ant, indices);
    cout << "Quitamos los NAN y quedan: " << cloud_filtered_ant->size() << endl;

    //copyPointCloud(*cloud_filtered_ant, *mapa);
    //cout << "Comprobacion del copy(tiene que dar los mismos puntos que en la linea anterior): " << mapa->size() << endl;

    // Filtrado de la nube y quitamos los NaN
    vGrid.setInputCloud (cloud_actual);
    vGrid.filter (*cloud_filtered_actual);
    cout << "Puntos tras VG_actual: " << cloud_filtered_actual->size() << endl;

    std::vector<int> indices_2;
    cloud_filtered_actual->is_dense = false;
    removeNaNFromPointCloud<PointXYZRGB>(*cloud_filtered_actual, *cloud_filtered_actual, indices_2);
    cout << "Quitamos los NAN y quedan: " << cloud_filtered_actual->size() << endl;

    //copyPointCloud(*cloud_filtered_2, *cloud_2);
    //cout << "Comprobacion del copy(tiene que dar los mismos puntos que en la linea anterior): " << cloud_2->size() << endl;

    pcl::PointCloud<pcl::Normal>::Ptr normals_ant (new pcl::PointCloud<pcl::Normal>);
    pcl::PointCloud<pcl::Normal>::Ptr normals_actual (new pcl::PointCloud<pcl::Normal>);
    const float normal_radius = 0.05;

    // Estas son para el SIFT
    //compute_surface_normals(cloud_1, normal_radius, normals_1);
    //compute_surface_normals(cloud_2, normal_radius, normals_2);

    // Detectamos los keypoints
    //cout << "antes de entrar en la deteccion de los keypoints" << endl;
    //SIFTdetect_keypoints(cloud_1, *pcKeyPoints_1, 0.005f, 6, 4, 0.005f);
    //SIFTdetect_keypoints(cloud_2, *pcKeyPoints_2, 0.005f, 6, 4, 0.005f);

    HARRISdetect_keypoints(cloud_filtered_ant, *pcKeyPoints_antXYZ);
    HARRISdetect_keypoints(cloud_filtered_actual, *pcKeyPoints_actualXYZ);

    //std::cout << "No of SIFT points in the keypoints_1 are " << pcKeyPoints_1->points.size () << std::endl;
    //std::cout << "No of SIFT points in the keypoints_2 are " << pcKeyPoints_2->points.size () << std::endl;
    //cout << "paso la deteccion" << endl;

    if((pcKeyPoints_ant->size() > 10 && pcKeyPoints_actual->size() > 10) || (pcKeyPoints_antXYZ->size() > 10 && pcKeyPoints_actualXYZ->size() > 10)){
      cout << "Paso por el if" << endl;

      // Esto para el HARRIS
      compute_surface_normals(pcKeyPoints_antXYZ, normal_radius, normals_ant);
      compute_surface_normals(pcKeyPoints_actualXYZ, normal_radius, normals_actual);

      // features SIFT
      //PFH(cloud_1, normals_1, pcKeyPoints_1, *cloudDescriptors_1, 0.05f);
      //PFH(cloud_2, normals_2, pcKeyPoints_2, *cloudDescriptors_2, 0.05f);

      // features HaRRIs
      PFHRGB(cloud_filtered_ant, normals_ant, pcKeyPoints_antXYZ, *cloudDescriptors_ant, 0.05f);
      PFHRGB(cloud_filtered_actual, normals_actual, pcKeyPoints_actualXYZ, *cloudDescriptors_actual, 0.05f);

      std::cout << "No of PFH points in the descriptors_mapa are " << cloudDescriptors_ant->points.size () << std::endl;
      std::cout << "No of PFH points in the descriptors_2 are " << cloudDescriptors_actual->points.size () << std::endl;

      // Con el HARRIS si que funciona

      // CorrespondenceRejactorSampleConsensus

      registration::CorrespondenceEstimation<PFHSignature125,PFHSignature125> corr_est;
      corr_est.setInputSource(cloudDescriptors_actual);
      corr_est.setInputTarget(cloudDescriptors_ant);

      cout << "Antes de determinar las correspondencias" << endl;

      boost::shared_ptr<Correspondences> correspondences (new Correspondences);
      //corr_est.determineCorrespondences (*correspondences);
      corr_est.determineReciprocalCorrespondences (*correspondences);

      cout << "Ya se han determinado las correspondencias" << endl;

      boost::shared_ptr<Correspondences> correspondences_result_rej_sac (new Correspondences);
      registration::CorrespondenceRejectorSampleConsensus<PointXYZRGB> corr_rej_sac;
      corr_rej_sac.setInputSource(cloud_actual);
      corr_rej_sac.setInputTarget(cloud_ant);
      // ransac
      corr_rej_sac.setInlierThreshold(0.1);
      corr_rej_sac.setMaximumIterations(1000);
      corr_rej_sac.setInputCorrespondences(correspondences);
      corr_rej_sac.getCorrespondences(*correspondences_result_rej_sac);

      Eigen::Matrix4f transform_res_from_SAC = corr_rej_sac.getBestTransformation();

      cout << "Después de todo el lío nos quedamos con: " << correspondences->size() << " ó: " << correspondences_result_rej_sac->size() << " correspondencias" << endl;
      cout << "Transform from SAC: " << endl;
      cout <<  transform_res_from_SAC  << endl;


      // Fin del CorrespondenceRejactorSampleConsensus

      // Esto va folladisimo en comparacion con el CorrespondenceRejactorSampleConsensus
      // TransformationEstimationSVD
      /**
      boost::shared_ptr<pcl::Correspondences> correspondences (new pcl::Correspondences);
      pcl::registration::CorrespondenceEstimation<PointXYZRGB, PointXYZRGB> corr_est;
      corr_est.setInputSource (cloud_2);
      corr_est.setInputTarget (mapa);
      corr_est.determineReciprocalCorrespondences (*correspondences);

      Eigen::Matrix4f transform_res_from_SVD;
      registration::TransformationEstimationSVD<PointXYZRGB, PointXYZRGB> trans_est_svd;
      trans_est_svd.estimateRigidTransformation(*cloud_2, *mapa,
                                                *correspondences,
                                                transform_res_from_SVD);

      cout << "Despues de todo el lio nos quedamos con: " << correspondences->size() << " correspondencias" << endl;
      cout << "transform from SAC: " << endl;
      cout <<  transform_res_from_SVD  << endl;
      */
      // Fin del TransformationEstimationSVD

      pcl::PointCloud<pcl::PointXYZRGB>::Ptr transformed_cloud (new pcl::PointCloud<pcl::PointXYZRGB> ());
      // transformpointcloud
      transformPointCloud(*cloud_actual,*transformed_cloud,transform_res_from_SAC);

      cout << "Después de la transformación" << endl;

      /*
      // nuevo ICP
      IterativeClosestPoint<PointXYZRGB, PointXYZRGB> icp;
      icp.setInputSource(cloud_actual);
      icp.setInputTarget(cloud_ant);

      PointCloud<PointXYZRGB> final;
      icp.align(final);
      std::cout << "has converged:" << icp.hasConverged() << " score: " << icp.getFitnessScore() << std::endl;
      std::cout << icp.getFinalTransformation() << std::endl;
      Eigen::Matrix4f matrix_icp = icp.getFinalTransformation();


      pcl::PointCloud<pcl::PointXYZRGB>::Ptr transformed_cloud (new pcl::PointCloud<pcl::PointXYZRGB> ());
      // transformpointcloud
      transformPointCloud(*cloud_actual,*transformed_cloud_2,matrix_icp);

      cout << "Despues de la transformacion" << endl;
      */

      *mapa += *transformed_cloud;

      pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_filtered_map (new pcl::PointCloud<pcl::PointXYZRGB>);
      vGrid.setInputCloud (mapa);
      vGrid.filter (*cloud_filtered_map);
      cout << "Puntos del mapa antes del filtrado y de la visualización: " << mapa->points.size() << endl;
      cout << "Puntos tras VG_mapa antes de la visualización: " << cloud_filtered_map->size() << endl;

      swap(cloud_ant,cloud_actual);
      //copyPointCloud(*cloud_actual, *cloud_ant);
      //copyPointCloud(*cloud_2, *cloud_1);

    }
  }
}

void verEmparejamientos(pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud, pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_ant, pcl::PointCloud<pcl::PointXYZRGB>::Ptr n_ant){
    //pcl::visualization::PCLVisualizer::Ptr viewer;//objeto viewer

    //constructor/inicialización:
    viewer = pcl::visualization::PCLVisualizer::Ptr(new pcl::visualization::PCLVisualizer ("3D Viewer"));
    viewer->setBackgroundColor (0, 0, 0);

    //viewer->addCoordinateSystem (1.0); //podriamos dibujar un sistema de coordenadas si quisieramos
    viewer->initCameraParameters ();

    //visualizar nube “cloud”;
    pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgb(cloud);   //esto es el manejador de color de la nube "cloud"
    if (!viewer->updatePointCloud (cloud,rgb, "cloud")) //intento actualizar la nube y si no existe la creo.
        viewer->addPointCloud(cloud,rgb,"cloud");

    //para “bloquear” el visualizador podemos poner un bucle que atienda a los eventos. obviamente es una solución temporal ya que nuestro programa no se puede quedar bloqueado visualizando.
    while (!viewer->wasStopped()){
        viewer->spinOnce(100);
        boost::this_thread::sleep (boost::posix_time::microseconds (10));
    }

    //Una vez visto un ejemplo de como dibujar una nube sobre el visualizador de pcl, procedemos a visualizar las correspondencias. El objeto correspondencias de PCL tiene un conjunto de correspondencias que no es mas que dos índices a los puntos de los features. Por tanto, las nubes a pasarle a esta función tienen que ser las correspondientes que se hayan usado para las correspondencias.
    //TODO -> nube anterior
    //pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_ant; // =
    Eigen::Affine3f transfrom_translation = pcl::getTransformation(5.0, 0, 0, 0, 0, 0);

    pcl::PointCloud<pcl::PointXYZ>::Ptr n_ant_transformed(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_ant_transformed (new pcl::PointCloud<pcl::PointXYZRGB>);

    pcl::transformPointCloud (*cloud_ant, *cloud_ant_transformed,transfrom_translation);
    //pcl::transformPointCloud (*n_ant, *n_ant_transformed,transfrom_translation);


     //pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZRGB> green(cloud, 0, 255, 0);
    pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgbcloud(cloud);
    if (!viewer->updatePointCloud (cloud,rgbcloud, "cloudn1")) //intento actualizar la nube y si no existe la creo.
        viewer->addPointCloud(cloud,rgbcloud,"cloudn1");

    //pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZRGB> red(cloud_ant, 255, 0, 0);
    pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgbcloud_ant(cloud_ant_transformed);
    if (!viewer->updatePointCloud (cloud_ant_transformed,rgbcloud_ant, "cloudn2")) //intento actualizar la nube y si no existe la creo.
        viewer->addPointCloud(cloud_ant_transformed,rgbcloud_ant,"cloudn2");

    std::string corresname="correspondences";
    if (!viewer->updateCorrespondences<pcl::PointXYZ>(n_current,n_ant_transformed,correspondeces_sac,1)) //intento actualizar la nube y si no existe la creo.
        viewer->addCorrespondences<pcl::PointXYZ>(n_current,n_ant_transformed,correspondeces_sac,1, corresname);
}

void callback(const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr& msg){
  // Declaraciones
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr      cloud_filtered   (new pcl::PointCloud<pcl::PointXYZRGB>);
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr      pcKeyPoints_XYZ  (new pcl::PointCloud<pcl::PointXYZRGB>);
  pcl::PointCloud<pcl::PFHSignature125>::Ptr  cloudDescriptors (new pcl::PointCloud<pcl::PFHSignature125>);
  //pcl::PointCloud<pcl::PointWithScale>::Ptr pcKeyPoints      (new pcl::PointCloud<pcl::PointWithScale>);
  std::vector<int> indices;
  //pcl::VoxelGrid<pcl::PointXYZRGB > vGrid;
  pcl::PointCloud<pcl::Normal>::Ptr normals (new pcl::PointCloud<pcl::Normal>);


  //Lectura de la nube actual.                            -> cloud
  copyPointCloud(*msg, *cloud);
  cout << "Puntos capturados: " << cloud->size() << endl;
  //Filtrado de la nube actual.                           -> cloud_filtered
  filter_cloud(cloud, cloud_filtered);
  cout << "Puntos tras VG: " << cloud_filtered->size() << endl;
  //Eliminado de los NaN de la nube filtrada actual.      -> cloud_filtered
  removeNaNFromPointCloud<PointXYZRGB>(*cloud_filtered, *cloud_filtered, indices);
  cout << "Quitamos los NAN y quedan: " << cloud_filtered->size() << endl;
  //Detección de características                          -> pcKeyPoints_XYZ
  HARRISdetect_keypoints(cloud_filtered, *pcKeyPoints_XYZ);
  //Si detectamos un número de caracteristicas suficientes...
  if(pcKeyPoints_XYZ->size() > 10){
    cout << "Paso por el if" << endl;
    //Cálculo de normales a la superficie.                -> normals
    compute_surface_normals(pcKeyPoints_XYZ, normal_radius, normals);
    //Extracción de características.                      -> cloudDescriptors
    PFHRGB(cloud_filtered, normals, pcKeyPoints_XYZ, feature_radius, *cloudDescriptors);
    std::cout << "Nº of PFH points in the descriptors_cloud_filtered are " << cloudDescriptors->points.size() << std::endl;
  }

  //Si es la primera nube...
  if(empieza==true){
    cout << "Es primera nube." << endl;
    copyPointCloud(*cloud_filtered, *cloud_ant);
    copyPointCloud(*cloud_filtered, *mapa);
    empieza = false;
  }

  //Si no es la primera nube...
  else{
    cout << "Es nube siguiente." << endl;

    //Si se detectó un número de caracteristicas suficientes...
    if(pcKeyPoints_antXYZ->size() > 10){
      std::cout << "Nº of PFH points in the descriptors_cloud_filtered_ant are " << cloudDescriptors_ant->points.size() << std::endl;

      ///////////////////////////////////////////
      // CorrespondenceRejactorSampleConsensus //
      ///////////////////////////////////////////
      //Determinación de correspondencias por CorrespondenceRejactorSampleConsensus.     -> transform_res_from_SAC
      registration::CorrespondenceEstimation<PFHSignature125,PFHSignature125> corr_est;
      corr_est.setInputSource(cloudDescriptors);
      corr_est.setInputTarget(cloudDescriptors_ant);

      cout << "Antes de determinar las correspondencias." << endl;

      boost::shared_ptr<Correspondences> correspondences (new Correspondences);
      //corr_est.determineCorrespondences (*correspondences);
      corr_est.determineReciprocalCorrespondences (*correspondences);

      cout << "Ya se han determinado las correspondencias." << endl;

      boost::shared_ptr<Correspondences> correspondences_result_rej_sac (new Correspondences);
      registration::CorrespondenceRejectorSampleConsensus<PointXYZRGB> corr_rej_sac;
      corr_rej_sac.setInputSource(cloud);
      corr_rej_sac.setInputTarget(cloud_ant);
      // ransac
      corr_rej_sac.setInlierThreshold(0.1);
      corr_rej_sac.setMaximumIterations(1000);
      corr_rej_sac.setInputCorrespondences(correspondences);
      corr_rej_sac.getCorrespondences(*correspondences_result_rej_sac);

      Eigen::Matrix4f transform_res_from_SAC = corr_rej_sac.getBestTransformation();

      cout << "Después de todo el lío nos quedamos con: " << correspondences->size() << " ó: " << correspondences_result_rej_sac->size() << " correspondencias." << endl;
      cout << "Matriz de transformación por Sample Consensus: " << endl;
      cout << transform_res_from_SAC << endl;

      ///////////////////////////////////////////////////
      // Fin del CorrespondenceRejactorSampleConsensus //
      ///////////////////////////////////////////////////

      pcl::PointCloud<pcl::PointXYZRGB>::Ptr transformed_cloud (new pcl::PointCloud<pcl::PointXYZRGB>());
      //Aplicar la transformación a la nube de puntos filtrada.         -> transformed_cloud
      transformPointCloud(*cloud_filtered, *transformed_cloud, transform_res_from_SAC);

      cout << "Después de la transformación." << endl;

      /*
      // nuevo ICP
      IterativeClosestPoint<PointXYZRGB, PointXYZRGB> icp;
      icp.setInputSource(cloud);
      icp.setInputTarget(cloud_ant);

      PointCloud<PointXYZRGB> final;
      icp.align(final);
      std::cout << "has converged:" << icp.hasConverged() << " score: " << icp.getFitnessScore() << std::endl;
      std::cout << icp.getFinalTransformation() << std::endl;
      Eigen::Matrix4f matrix_icp = icp.getFinalTransformation();


      pcl::PointCloud<pcl::PointXYZRGB>::Ptr transformed_cloud (new pcl::PointCloud<pcl::PointXYZRGB> ());
      // transformpointcloud
      transformPointCloud(*cloud,*transformed_cloud_2,matrix_icp);

      cout << "Despues de la transformacion" << endl;
      */

      //////////////////////////////////////////////////
      // Trabajar siempre sobre la nube transformada. //
      //////////////////////////////////////////////////
      *mapa += *transformed_cloud;

      //pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_filtered_map (new pcl::PointCloud<pcl::PointXYZRGB>);
      //vGrid.setInputCloud (mapa);
      //vGrid.filter (*cloud_filtered_map);
      //cout << "Puntos del mapa antes del filtrado y de la visualización: " << mapa->points.size() << endl;
      //cout << "Puntos tras VG_mapa antes de la visualización: " << cloud_filtered_map->size() << endl;

  //TODO REVISAR ESTO...
      //ANTES:
      //swap(cloud_ant,cloud);
      //AHORA:
      *cloud_ant = *transformed_cloud;
    }
  }
  //Volcado de actual a anterior.
  *cloudDescriptors_ant = *cloudDescriptors;
  *pcKeyPoints_antXYZ = *pcKeyPoints_XYZ;
  *normals_ant = *normals;
  *cloudDescriptors_ant = *cloudDescriptors;
}
